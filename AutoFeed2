-- ================== КОНФИГ ==================
getgenv().Config = getgenv().Config or {
    PetName = "birthday_2025_butterfly", -- какой питомец качается (kind)
    PerPotionPet = 2,                     -- сколько зелий на 1 пета

    -- опционально:
    PotionKind = "pet_age_potion",        -- kind зелья возраста
    AgeTarget = 6,                        -- целевой возраст
    CreatorType = "__Enum_PetObjectCreatorType_2",
    PetObjectsFolderName = "PetObjects",
    EquipTimeout = 2,
    PetObjectTimeout = 3,
}

local cfg = getgenv().Config
local petName = cfg.PetName
local PerPotion = cfg.PerPotionPet
local PotionKind = cfg.PotionKind or "pet_age_potion"
local AgeTarget = cfg.AgeTarget or 6
local CreatorType = cfg.CreatorType or "__Enum_PetObjectCreatorType_2"
local PetObjectsFolderName = cfg.PetObjectsFolderName or "PetObjects"
local EquipTimeout = cfg.EquipTimeout or 2
local PetObjectTimeout = cfg.PetObjectTimeout or 3

-- ================== СЕРВИСЫ / API ==================
local RS = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer

local API = RS:WaitForChild("API")
local EquipRemote = API:WaitForChild("ToolAPI/Equip")
local CreatePetObject = API:WaitForChild("PetObjectAPI/CreatePetObject")
local ConsumeFoodObject = API:WaitForChild("PetAPI/ConsumeFoodObject")

local clientData = require(RS.ClientModules.Core.ClientData)

-- ================== УТИЛИТЫ ==================
local function getPlayerData()
    return clientData.get_data()[tostring(LP)]
end

local function getAgePotions()
    local potions = {}
    local inv = getPlayerData().inventory
    local foods = (inv and inv.food) or {}
    for i, item in pairs(foods) do
        if item and item.kind == PotionKind then
            table.insert(potions, item)
        end
    end
    return potions
end

local function getPets(targetKind)
    local out = {}
    local inv = getPlayerData().inventory
    local pets = (inv and inv.pets) or {}
    for i, pet in pairs(pets) do
        if pet
           and pet.kind == targetKind
           and (pet.properties and (pet.properties.age or 0) < AgeTarget)
           and not (pet.properties and pet.properties.mega_neon) then
            table.insert(out, pet)
        end
    end
    return out
end

local function findPetByUnique(u)
    local inv = getPlayerData().inventory
    local pets = (inv and inv.pets) or {}
    for i, v in pairs(pets) do
        if v and v.unique == u then
            return v
        end
    end
end

local function safeInvoke(remote, ...)
    for attempt = 1, 3 do
        local ok, res = pcall(function()
            return remote:InvokeServer(...)
        end)
        if ok then return true, res end
        warn(string.format("[Invoke ERR %d] %s", attempt, tostring(res)))
        task.wait(0.2 * attempt)
    end
    return false, "invoke failed"
end

local function waitForToolEquipped(timeout)
    local t0 = os.clock()
    local to = timeout or 3
    local char = LP.Character or LP.CharacterAdded:Wait()
    while os.clock() - t0 < to do
        if char:FindFirstChildOfClass("Tool") then return true end
        task.wait(0.05)
    end
    return false
end

local function waitForPetAge(unique, targetAge, timeout)
    local t0 = os.clock()
    local to = timeout or 5
    while os.clock() - t0 < to do
        local pet = findPetByUnique(unique)
        if not pet then
            return true -- пропал из инвентаря (фьюз/переименование) — не блокируем
        end
        if (pet.properties and (pet.properties.age or 0)) >= targetAge then
            return true
        end
        task.wait(0.1)
    end
    return false
end

local petObjectsFolder = workspace:WaitForChild(PetObjectsFolderName)

local function waitForPetObject(folder, timeout)
    local created
    local conn
    local to = timeout or 3
    conn = folder.ChildAdded:Connect(function(child)
        if child:IsA("Model") then
            created = child
        end
    end)

    local t0 = os.clock()
    while os.clock() - t0 < to and not created do
        created = folder:FindFirstChildWhichIsA("Model")
        if created then break end
        task.wait(0.05)
    end

    if conn then conn:Disconnect() end
    return created
end

-- ================== ОСНОВНОЙ ЦИКЛ ==================
while true do
    -- 1) Ресурсы
    local agePotions = getAgePotions()
    if #agePotions < PerPotion then
        warn(string.format("❌ Зелей недостаточно: %d/%d", #agePotions, PerPotion))
        break
    end

    local pets = getPets(petName)
    if #pets == 0 then
        warn("⏳ Жду новых петов...")
        repeat
            task.wait(2)
            pets = getPets(petName)
        until #pets > 0
        warn("✅ Найдены новые петы!")
    end

    -- 2) Выбор пета и зелий
    local selectedPet = table.remove(pets, 1)
    if not (selectedPet and selectedPet.unique) then
        warn("❌ Не удалось взять пета из списка")
        task.wait(0.5)
        continue
    end

    local selectedPotions = {}
    for i = 1, PerPotion do
        selectedPotions[i] = agePotions[i]
        if not selectedPotions[i] then
            warn("❌ Во время отбора зелей инвентарь изменился. Повтор.")
            task.wait(0.5)
            continue
        end
    end

    local mainPotion = selectedPotions[1]
    if not (mainPotion and mainPotion.unique) then
        warn("❌ Нет главного зелья (mainPotion)")
        task.wait(0.5)
        continue
    end

    local additional_uniques = {}
    for i = 2, PerPotion do
        table.insert(additional_uniques, selectedPotions[i].unique)
    end

    -- 3) Экипируем пета и главное зелье
    local ok1 = safeInvoke(EquipRemote, selectedPet.unique, { use_sound_delay = true })
    if not ok1 then
        warn("❌ Не удалось экипировать пета. Пропуск итерации.")
        task.wait(0.5)
        continue
    end
    task.wait(0.1)

    local ok2 = safeInvoke(EquipRemote, mainPotion.unique, { use_sound_delay = true })
    if not ok2 then
        warn("❌ Не удалось экипировать главное зелье. Пропуск итерации.")
        task.wait(0.5)
        continue
    end

    waitForToolEquipped(EquipTimeout)

    -- 4) Создаём объект корма (unique_id = экипированное зелье)
    local okCreate = safeInvoke(CreatePetObject, CreatorType, {
        additional_consume_uniques = additional_uniques,
        pet_unique = selectedPet.unique,
        unique_id = mainPotion.unique,
    })
    if not okCreate then
        warn("❌ CreatePetObject вернул ошибку. Пробую продолжить осторожно.")
    end

    local createdModel = waitForPetObject(petObjectsFolder, PetObjectTimeout)
    if not createdModel then
        warn("❌ Объект пета не появился. Пропуск итерации.")
        task.wait(0.2)
        continue
    end

    -- 5) Кормим объектом
    local okFeed = pcall(function()
        ConsumeFoodObject:FireServer(createdModel, selectedPet.unique)
    end)
    if not okFeed then
        warn("❌ Ошибка ConsumeFoodObject (FireServer).")
    end

    -- 6) Ждём обновление возраста/инвентаря
    waitForPetAge(selectedPet.unique, AgeTarget, 5)
    task.wait(0.2)
end
